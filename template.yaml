AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  XBot Legislative Data Pipeline - Step Function com Download, Clean e FetchIndividualProject

# Parâmetros que serão solicitados no deploy
Parameters:
  OpenAIKeyValue:
    Type: String
    NoEcho: true # Esconde o valor digitado em logs e console
    Description: "Cole aqui a sua chave secreta da OpenAI (sk-...)."
    MinLength: 1

Globals:
  Function:
    Timeout: 300
    MemorySize: 512
    Runtime: python3.10
    Architectures: [x86_64]
    Environment:
      Variables:
        S3_BUCKET_NAME: !Ref DataBucket

Resources:
  ### APIKEY da OpenAI ###
  OpenAISecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: XBot/OpenAIKey
      Description: "Chave da API da OpenAI para o projeto XBot"
      # Usa o valor do parâmetro para preencher o segredo
      SecretString: !Sub '{"OPENAI_API_KEY":"${OpenAIKeyValue}"}'


  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub "${DataBucket.Arn}/*"


  ### Bucket de dados ###
  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: xbot-legislative-data

  ### Download CSV ###
  DownloadCSVFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: lambdas.fetch_projects_csv.lambda_handler
      Description: Baixa o CSV da Câmara e salva no bucket S3 (pasta raw/)
      Role: !GetAtt LambdaExecutionRole.Arn

  ### Clean CSV ###
  CleanCSVFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: lambdas.clean_csv.lambda_handler
      Description: Lê o CSV do S3, limpa e salva na pasta clean/, retornando proposições filtradas
      Role: !GetAtt LambdaExecutionRole.Arn

  ### Fetch Individual Project ###
  FetchIndividualProjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: lambdas.fetch_individual_project.lambda_handler
      Description: Itera pelas proposições, baixa o PDF do inteiro teor e salva texto no S3
      Timeout: 600  # alguns PDFs podem demorar
      MemorySize: 1024
      Role: !GetAtt LambdaExecutionRole.Arn

  ### Generate Tweets ###
  GenerateTweetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: lambdas.generate_tweets.lambda_handler
      Description: Gera o texto de um tweet para uma proposição usando IA.
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60 # Chamadas de API podem demorar
      MemorySize: 512
      Environment:
        Variables:
          OPENAI_API_KEY: !Ref OpenAISecret
      Policies:
        - SecretsManagerReadPolicy:
            SecretName: !Ref OpenAISecret

  ### Step Function ###
  LegislativeDataStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: LegislativeDataPipeline
      DefinitionSubstitutions:
        DownloadCSVArn: !GetAtt DownloadCSVFunction.Arn
        CleanCSVArn: !GetAtt CleanCSVFunction.Arn
        FetchIndividualProjectArn: !GetAtt FetchIndividualProjectFunction.Arn
        GenerateTweetArn: !GetAtt GenerateTweetFunction.Arn
      Definition:
        Comment: "Pipeline inicial: Download → Clean → Fetch Individual"
        StartAt: DownloadCSV
        States:
          DownloadCSV:
            Type: Task
            Resource: ${DownloadCSVArn}
            ResultPath: "$.download"
            Next: CleanCSV
          CleanCSV:
            Type: Task
            Resource: ${CleanCSVArn}
            ResultPath: "$.clean"
            Next: FetchIndividualProject
          FetchIndividualProject:
            Type: Task
            Resource: ${FetchIndividualProjectArn}
            ResultPath: "$.fetch"
            Next: GenerateTweetsMap
          GenerateTweetsMap: # <-- Novo estado Map
            Type: Map
            ItemsPath: "$.fetch.propositions" 
            MaxConcurrency: 5 
            ResultPath: "$.tweets"
            Iterator:
              StartAt: GenerateSingleTweet
              States:
                GenerateSingleTweet:
                  Type: Task
                  Resource: ${GenerateTweetArn}
                  End: true
            End: true # <-- Fim da State Machine
      Policies:
          - LambdaInvokePolicy:
              FunctionName: !Ref DownloadCSVFunction
          - LambdaInvokePolicy:
              FunctionName: !Ref CleanCSVFunction
          - LambdaInvokePolicy:
              FunctionName: !Ref FetchIndividualProjectFunction
          - LambdaInvokePolicy:
              FunctionName: !Ref GenerateTweetFunction