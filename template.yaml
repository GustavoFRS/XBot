AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  XBot Legislative Data Pipeline - Step Function com Download, Clean e FetchIndividualProject

# Parâmetros que serão solicitados no deploy
Parameters:
  OpenAIKeyValue:
    Type: String
    NoEcho: true # Esconde o valor digitado em logs e console
    Description: "Cole aqui a sua chave secreta da OpenAI (sk-...)."
    MinLength: 1
  # Valores para as credenciais da API do X
  XApiKey:
    Type: String
    NoEcho: true
    Description: "Cole aqui a sua X API Key."
  XApiSecret:
    Type: String
    NoEcho: true
    Description: "Cole aqui a sua X API Secret."
  XAccessToken:
    Type: String
    NoEcho: true
    Description: "Cole aqui o seu X Access Token."
  XAccessTokenSecret:
    Type: String
    NoEcho: true
    Description: "Cole aqui o seu X Access Token Secret."

Globals:
  Function:
    Timeout: 300
    MemorySize: 512
    Runtime: python3.10
    Architectures: [x86_64]
    Environment:
      Variables:
        S3_BUCKET_NAME: !Ref DataBucket

Resources:
  ### APIKEY da OpenAI ###
  OpenAISecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: XBot/OpenAIKey
      Description: "Chave da API da OpenAI para o projeto XBot"
      SecretString: !Sub '{"OPENAI_API_KEY":"${OpenAIKeyValue}"}'
  ### Keys do X ###
  XApiSecrets: 
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: XBot/XKeys
      Description: "Credenciais da API do X (v2) para o projeto XBot"
      SecretString: !Sub |
        {
          "X_API_KEY": "${XApiKey}",
          "X_API_SECRET": "${XApiSecret}",
          "X_ACCESS_TOKEN": "${XAccessToken}",
          "X_ACCESS_SECRET": "${XAccessTokenSecret}"
        }


  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub "${DataBucket.Arn}/*"
        - PolicyName: LambdaSecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: "secretsmanager:GetSecretValue"
                Resource: !Ref OpenAISecret
              - Effect: Allow
                Action: "secretsmanager:GetSecretValue"
                Resource: !Ref XApiSecrets 


  ### Bucket de dados ###
  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: xbot-legislative-data

  ### Download CSV ###
  DownloadCSVFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: lambdas.fetch_projects_csv.lambda_handler
      Description: Baixa o CSV da Câmara e salva no bucket S3 (pasta raw/)
      Role: !GetAtt LambdaExecutionRole.Arn

  ### Clean CSV ###
  CleanCSVFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: lambdas.clean_csv.lambda_handler
      Description: Lê o CSV do S3, limpa e salva na pasta clean/, retornando proposições filtradas
      Role: !GetAtt LambdaExecutionRole.Arn

  ### Fetch Individual Project ###
  FetchIndividualProjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: lambdas.fetch_individual_project.lambda_handler
      Description: Itera pelas proposições, baixa o PDF do inteiro teor e salva texto no S3
      Timeout: 600  # alguns PDFs podem demorar
      MemorySize: 1024
      Role: !GetAtt LambdaExecutionRole.Arn

  ### Generate Tweets ###
  GenerateTweetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: lambdas.generate_tweet.lambda_handler
      Description: Gera o texto de um tweet para uma proposição usando IA.
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60 # Chamadas de API podem demorar
      MemorySize: 512
      Environment:
        Variables:
          OPENAI_API_KEY: !Ref OpenAISecret

  ### Tweet Poster ###
  PosterLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: lambdas.post_tweet.lambda_handler
      Description: Publica tweets no X
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          X_SECRET_NAME: "XBot/XKeys"
  
  SchedulerLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: lambdas.schedule_tweet.lambda_handler
      Description: Encontra tweets no S3 e cria agendamentos no EventBridge para postá-los.
      Timeout: 120 
      MemorySize: 256
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref DataBucket
          POSTER_LAMBDA_ARN: !GetAtt PosterLambdaFunction.Arn
          SCHEDULER_ROLE_ARN: !GetAtt EventBridgeSchedulerRole.Arn
      Policies:
        # Política 0
        - S3ReadPolicy: 
            BucketName: !Ref DataBucket

        # Política 1
        - Statement:
            - Effect: Allow
              Action:
                - scheduler:CreateSchedule
                - scheduler:UpdateSchedule
                - scheduler:DeleteSchedule
              Resource: "*"

        # Política 2 (corrigida)
        - Statement:
            - Effect: Allow
              Action: iam:PassRole
              Resource: !GetAtt EventBridgeSchedulerRole.Arn


  # Role que o EventBridge Scheduler assume para invocar a PosterLambda
  EventBridgeSchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: scheduler.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InvokePosterLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: "lambda:InvokeFunction"
                Resource: !GetAtt PosterLambdaFunction.Arn

  EventBridgeSchedulerInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: scheduler.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InvokeSchedulerLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: "lambda:InvokeFunction"
                Resource: !GetAtt SchedulerLambdaFunction.Arn

  # Regra CRON que invoca a SchedulerLambda todo dia às 8h da manhã (horário de Brasília)
  DailySchedulerTrigger:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: Daily-Tweet-Scheduling-Trigger
      Description: "Invoca a SchedulerLambda todo dia para agendar os tweets."
      ScheduleExpression: "cron(30 10 * * ? *)"
      ScheduleExpressionTimezone: "America/Sao_Paulo"
      FlexibleTimeWindow:
        Mode: "OFF"
      Target:
        Arn: !GetAtt SchedulerLambdaFunction.Arn
        RoleArn: !GetAtt EventBridgeSchedulerInvokeRole.Arn # O Scheduler também precisa de uma role para invocar a SchedulerLambda

  # Role que o EventBridge Scheduler assume para INICIAR a Step Function
  EventBridgeSchedulerSfnRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: scheduler.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StartStepFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: "states:StartExecution"
                Resource: !GetAtt LegislativeDataStateMachine.Arn

  # Regra CRON que invoca a Step Function
  DailyStepFunctionTrigger:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: Daily-Data-Pipeline-Trigger
      Description: "Invoca a Step Function de geração de dados e tweets diariamente."
      ScheduleExpression: "cron(0 8 ? * TUE-SAT *)" # Executa terça-sábado
      ScheduleExpressionTimezone: "America/Sao_Paulo"
      FlexibleTimeWindow:
        Mode: "OFF"
      State: ENABLED # Boa prática para garantir que a regra seja criada ativa
      Target:
        Arn: !GetAtt LegislativeDataStateMachine.Arn
        RoleArn: !GetAtt EventBridgeSchedulerSfnRole.Arn

  ### Step Function ###
  LegislativeDataStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: LegislativeDataPipeline
      DefinitionSubstitutions:
        DownloadCSVArn: !GetAtt DownloadCSVFunction.Arn
        CleanCSVArn: !GetAtt CleanCSVFunction.Arn
        FetchIndividualProjectArn: !GetAtt FetchIndividualProjectFunction.Arn
        GenerateTweetArn: !GetAtt GenerateTweetFunction.Arn
      Definition:
        Comment: "Pipeline inicial: Download → Clean → Fetch Individual"
        StartAt: DownloadCSV
        States:
          DownloadCSV:
            Type: Task
            Resource: ${DownloadCSVArn}
            Next: CleanCSV
          CleanCSV:
            Type: Task
            Resource: ${CleanCSVArn}
            ResultPath: "$.cleanCsv"
            Next: FetchIndividualProject
          FetchIndividualProject:
            Type: Task
            Resource: ${FetchIndividualProjectArn}
            ResultPath: "$.dailyProjects"
            Next: GenerateTweetsMap
          GenerateTweetsMap: 
            Type: Map
            ItemsPath: "$.dailyProjects.propositions" 
            MaxConcurrency: 5 
            ResultPath: "$.tweets"
            Iterator:
              StartAt: GenerateSingleTweet
              States:
                GenerateSingleTweet:
                  Type: Task
                  Resource: ${GenerateTweetArn}
                  End: true
            End: true
      Policies:
          - LambdaInvokePolicy:
              FunctionName: !Ref DownloadCSVFunction
          - LambdaInvokePolicy:
              FunctionName: !Ref CleanCSVFunction
          - LambdaInvokePolicy:
              FunctionName: !Ref FetchIndividualProjectFunction
          - LambdaInvokePolicy:
              FunctionName: !Ref GenerateTweetFunction